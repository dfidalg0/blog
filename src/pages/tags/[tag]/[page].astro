---
import type { GetStaticPaths } from 'astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import type { InferGetStaticPropsType } from 'astro';
import Layout from '@/layouts/Layout.astro';
import GridPosts from '@/components/GridPosts.astro';
import { getCreationTime } from '@/utils/posts';

type BlogPost = CollectionEntry<"blog">;

const creationTime =
  (entry: BlogPost) => getCreationTime(entry, 'unix');

export const getStaticPaths = (async ({ paginate }) => {
  const entries = await getCollection('blog');

  const tags = new Set<string>(['none', 'all']);

  for (const entry of entries) {
    for (const tag of entry.data.tags) {
      tags.add(tag);
    }
  }

  // For every tag, return a paginate() result.
  // Make sure that you pass `{params: {tag}}` to `paginate()`
  // so that Astro knows which tag grouping the result is for.
  return Array.from(tags).flatMap((tag) => {
    const posts = entries.filter((entry) => {
      if (tag === 'all') return true;

      if (tag === 'none') return !entry.data.tags.length;

      return entry.data.tags.includes(tag);
    }).sort((a, b) => creationTime(b) - creationTime(a));

    return paginate(posts, {
      params: { tag },
      props: { tag },
      pageSize: 12,
    });
  });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, tag } = Astro.props;

const { prev, next } = page.url;
---

<Layout title={`Tag: ${tag}`}>
  <div class="flex flex-col items-center w-[1080px] max-w-[90vw]">
    <section class="w-full">
      <h2 class="title">{(() => {
        switch (tag) {
          case 'none':
            return 'Posts with no tag';
          case 'all':
            return 'All posts';
          default:
            return <>Posts with tag: <span class="tag">{tag}</span></>
        }
      })()}</h2>
    </section>
    <GridPosts posts={page.data} />
    <section class="pagination w-full mt-10 mb-16">
      <a class="page-link prev" href={prev}>Previous</a>
      <a class="page-link next" href={next}>Next</a>
    </section>
  </div>
</Layout>

<style lang="scss">
.title {
  @apply flex items-center;
}

.tag {
  @apply
    rounded-full
    bg-zinc-300
    text-slate-900
    ml-4
    px-[.65em]
    py-[.25em]
    text-xl;
}

.pagination {
  @apply relative;
}

.page-link {
  @apply
    border-current
    border-[1px]
    px-5 py-5
    w-36
    rounded-md
    flex
    items-center;

  &:not([href]) {
    display: none;
  }

  &.prev {
    @apply justify-start absolute left-0;

    &::before {
      content: '<<';
      @apply text-2xl mr-3;
    }
  }

  &.next {
    @apply justify-end absolute right-0;

    &::after {
      content: '>>';
      @apply text-2xl ml-3;
    }
  }
}
</style>
