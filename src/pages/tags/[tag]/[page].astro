---
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import type { InferGetStaticPropsType } from 'astro';
import Layout from '@/layouts/Layout.astro';
import { Image } from 'astro:assets';
import { creationTimes } from 'virtual:creation-times';

const formatter = Intl.DateTimeFormat('en', {
  day: 'numeric',
  month: 'short',
  year: 'numeric',
});

export const getStaticPaths = (async ({ paginate }) => {
  const entries = await getCollection('blog');

  const tags = new Set<string>(['none']);

  for (const entry of entries) {
    for (const tag of entry.data.tags) {
      tags.add(tag);
    }
  }

  // For every tag, return a paginate() result.
  // Make sure that you pass `{params: {tag}}` to `paginate()`
  // so that Astro knows which tag grouping the result is for.
  return Array.from(tags).flatMap((tag) => {
    const posts = entries.filter((entry) => {
      if (tag === 'none') return !entry.data.tags.length;

      return entry.data.tags.includes(tag);
    });

    return paginate(posts, {
      params: { tag },
      props: { tag },
      pageSize: 12,
    });
  });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page, tag } = Astro.props;

const { prev, next } = page.url;
---

<Layout title={`Tag: ${tag}`}>
  <div class="flex flex-col items-center w-[1080px] max-w-[90vw]">
    <section class="w-full">
      <h2 class="title">Posts with tag: <span class="tag">{tag}</span></h2>
    </section>
    <section class="posts mt-10">
      {page.data.map((item) =>
        <a
          href={`/posts/${item.slug}`}
          class="card"
        >
          <article>
            <section class="text-[11px]">
              {formatter.format(creationTimes[`src/content/blog/${item.id}`])}
            </section>
            <section class="text-xl font-bold">
              {item.data.title}
            </section>
            {item.data.cover &&
              <section class="cover mt-5 w-100">
                <Image
                  src={item.data.cover.img}
                  alt={item.data.cover.alt ?? ''}
                  width={300}
                />
              </section>
            }
            <section class="mt-3">
              {item.data.subtitle}
            </section>
          </article>
        </a>)
      }
    </section>
    <section class="pagination w-full mt-10 mb-16">
      <a class="page-link prev" href={prev}>Previous</a>
      <a class="page-link next" href={next}>Next</a>
    </section>
  </div>
</Layout>

<style lang="scss">
.posts {
  @apply
    w-full
    gap-5
    grid
    grid-cols-1
    sm:grid-cols-2
    md:grid-cols-3
    lg:grid-cols-4
    justify-items-center
}

.cover {
  @apply rounded-lg overflow-hidden;
}

.title {
  @apply flex items-center;
}

.tag {
  @apply
    rounded-full
    bg-zinc-300
    text-slate-900
    ml-4
    px-[.65em]
    py-[.25em]
    text-xl;
}

.card {
  @apply
    relative
    text-font
    hover:text-font
    col-span-1
    px-4 pt-5 pb-28
    bg-zinc-200 dark:bg-slate-900
    shadow-md
    shadow-zinc-500
    dark:shadow-slate-700
    rounded-xl
    max-w-[300px];

  &::after {
    content: '';
    will-change: opacity;
    transition: opacity .25s ease-in-out;

    @apply
      inset-0
      absolute
      opacity-0
      shadow-zinc-500
      dark:shadow-slate-700
      shadow-xl
      rounded-xl;
  }

  &:focus {
    outline: none;
  }

  &:hover::after, &:focus::after {
    @apply opacity-100;
  }
}

.pagination {
  @apply relative;
}

.page-link {
  @apply
    border-current
    border-[1px]
    px-5 py-5
    w-36
    rounded-md
    flex
    items-center;

  &:not([href]) {
    display: none;
  }

  &.prev {
    @apply justify-start absolute left-0;

    &::before {
      content: '<<';
      @apply text-2xl mr-3;
    }
  }

  &.next {
    @apply justify-end absolute right-0;

    &::after {
      content: '>>';
      @apply text-2xl ml-3;
    }
  }
}
</style>
